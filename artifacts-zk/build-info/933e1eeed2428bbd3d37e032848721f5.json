{"id":"933e1eeed2428bbd3d37e032848721f5","_format":"hh-sol-build-info-1","solcVersion":"0.8.8","solcLongVersion":"0.8.8+commit.dddeac2f","input":{"language":"Solidity","sources":{"contracts/Greeter.sol":{"content":"//SPDX-License-Identifier: Unlicense\npragma solidity ^0.8.8;\n\ncontract Greeter {\n    string private greeting;\n\n    constructor(string memory _greeting) {\n        greeting = _greeting;\n    }\n\n    function greet() public view returns (string memory) {\n        return greeting;\n    }\n\n    function setGreeting(string memory _greeting) public {\n        greeting = _greeting;\n    }\n}\n"}},"settings":{"optimizer":{"enabled":true,"mode":"3"},"outputSelection":{"*":{"*":["abi","evm.methodIdentifiers","metadata"],"":["ast"]}}}},"output":{"errors":[],"version":"0.8.8","long_version":"0.8.8+commit.dddeac2f.Linux.g++","zk_version":"1.3.10","sources":{"contracts/Greeter.sol":{"id":0,"ast":{"absolutePath":"contracts/Greeter.sol","exportedSymbols":{"Greeter":[32]},"id":33,"license":"Unlicense","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".8"],"nodeType":"PragmaDirective","src":"37:23:0"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":32,"linearizedBaseContracts":[32],"name":"Greeter","nameLocation":"71:7:0","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":3,"mutability":"mutable","name":"greeting","nameLocation":"100:8:0","nodeType":"VariableDeclaration","scope":32,"src":"85:23:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":2,"name":"string","nodeType":"ElementaryTypeName","src":"85:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"private"},{"body":{"id":12,"nodeType":"Block","src":"152:37:0","statements":[{"expression":{"id":10,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":8,"name":"greeting","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3,"src":"162:8:0","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":9,"name":"_greeting","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5,"src":"173:9:0","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"162:20:0","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":11,"nodeType":"ExpressionStatement","src":"162:20:0"}]},"id":13,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":6,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5,"mutability":"mutable","name":"_greeting","nameLocation":"141:9:0","nodeType":"VariableDeclaration","scope":13,"src":"127:23:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4,"name":"string","nodeType":"ElementaryTypeName","src":"127:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"126:25:0"},"returnParameters":{"id":7,"nodeType":"ParameterList","parameters":[],"src":"152:0:0"},"scope":32,"src":"115:74:0","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":20,"nodeType":"Block","src":"248:32:0","statements":[{"expression":{"id":18,"name":"greeting","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3,"src":"265:8:0","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"functionReturnParameters":17,"id":19,"nodeType":"Return","src":"258:15:0"}]},"functionSelector":"cfae3217","id":21,"implemented":true,"kind":"function","modifiers":[],"name":"greet","nameLocation":"204:5:0","nodeType":"FunctionDefinition","parameters":{"id":14,"nodeType":"ParameterList","parameters":[],"src":"209:2:0"},"returnParameters":{"id":17,"nodeType":"ParameterList","parameters":[{"constant":false,"id":16,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":21,"src":"233:13:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":15,"name":"string","nodeType":"ElementaryTypeName","src":"233:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"232:15:0"},"scope":32,"src":"195:85:0","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":30,"nodeType":"Block","src":"339:37:0","statements":[{"expression":{"id":28,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":26,"name":"greeting","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3,"src":"349:8:0","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":27,"name":"_greeting","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":23,"src":"360:9:0","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"349:20:0","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":29,"nodeType":"ExpressionStatement","src":"349:20:0"}]},"functionSelector":"a4136862","id":31,"implemented":true,"kind":"function","modifiers":[],"name":"setGreeting","nameLocation":"295:11:0","nodeType":"FunctionDefinition","parameters":{"id":24,"nodeType":"ParameterList","parameters":[{"constant":false,"id":23,"mutability":"mutable","name":"_greeting","nameLocation":"321:9:0","nodeType":"VariableDeclaration","scope":31,"src":"307:23:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":22,"name":"string","nodeType":"ElementaryTypeName","src":"307:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"306:25:0"},"returnParameters":{"id":25,"nodeType":"ParameterList","parameters":[],"src":"339:0:0"},"scope":32,"src":"286:90:0","stateMutability":"nonpayable","virtual":false,"visibility":"public"}],"scope":33,"src":"62:316:0","usedErrors":[]}],"src":"37:342:0"}}},"contracts":{"contracts/Greeter.sol":{"Greeter":{"abi":[{"inputs":[{"internalType":"string","name":"_greeting","type":"string"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"greet","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"string","name":"_greeting","type":"string"}],"name":"setGreeting","outputs":[],"stateMutability":"nonpayable","type":"function"}],"metadata":{"optimizer_settings":"M3B3","solc_metadata":"{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_greeting\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"greet\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_greeting\",\"type\":\"string\"}],\"name\":\"setGreeting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Greeter.sol\":\"Greeter\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/Greeter.sol\":{\"keccak256\":\"0xe70717d9040fc14f46565a7625f548372afe61264e4bb4101569b84cca3f7811\",\"license\":\"Unlicense\",\"urls\":[\"bzz-raw://918d172a212cfd2aa2eb1b546fbff6d3a2442006bb8df1d8703e11a0d59e08e7\",\"dweb:/ipfs/QmRcPKhfSNDri3ZNp4eGnKWPcnY7yFQgoRo2T76EsCrqe6\"]}},\"version\":1}","zk_version":"1.3.10"},"evm":{"legacyAssembly":null,"assembly":"\t.text\n\t.file\t\"Greeter.sol:Greeter\"\n\t.globl\t__entry\n__entry:\n.func_begin0:\n\tnop\tstack+=[1]\n\tptr.add\tr1, r0, stack[@ptr_calldata]\n\tshr.s\t96, r1, r1\n\tand\t@CPI0_0[0], r1, stack[@calldatasize]\n\tadd\t128, r0, r1\n\tst.1\t64, r1\n\tand!\t1, r2, r1\n\tjump.ne\t@.BB0_1\n\tadd\tstack[@calldatasize], r0, r1\n\tsub.s!\t4, r1, r1\n\tjump.lt\t@.BB0_2\n\tptr.add\tstack[@ptr_calldata], r0, r1\n\tld\tr1, r1\n\tshr.s\t224, r1, r1\n\tsub.s!\t@CPI0_4[0], r1, r2\n\tjump.eq\t@.BB0_39\n\tsub.s!\t@CPI0_5[0], r1, r1\n\tjump.ne\t@.BB0_2\n\tcontext.get_context_u128\tr1\n\tsub.s!\t0, r1, r1\n\tjump.ne\t@.BB0_2\n\tadd\tstack[@calldatasize], r0, r1\n\tsub.s\t4, r1, r2\n\tadd\t@CPI0_2[0], r0, r3\n\tsub.s!\t32, r2, r4\n\tadd\t0, r0, r4\n\tadd.lt\tr3, r0, r4\n\tand\t@CPI0_2[0], r2, r2\n\tsub.s!\t0, r2, r5\n\tadd.le\t0, r0, r3\n\tsub.s!\t@CPI0_2[0], r2, r2\n\tadd\tr4, r0, r2\n\tadd.eq\tr3, r0, r2\n\tsub.s!\t0, r2, r2\n\tjump.ne\t@.BB0_2\n\tptr.add\tstack[@ptr_calldata], r0, r2\n\tptr.add.s\t4, r2, r3\n\tld\tr3, r4\n\tsub.s!\t@CPI0_1[0], r4, r3\n\tjump.gt\t@.BB0_2\n\tadd\t35, r4, r3\n\tadd\t@CPI0_2[0], r0, r5\n\tsub!\tr3, r1, r6\n\tadd\t0, r0, r6\n\tadd.ge\tr5, r0, r6\n\tand\t@CPI0_2[0], r1, r1\n\tand\t@CPI0_2[0], r3, r3\n\tsub!\tr3, r1, r7\n\tadd.ge\t0, r0, r5\n\txor\tr3, r1, r1\n\tsub.s!\t@CPI0_2[0], r1, r1\n\tadd\tr6, r0, r1\n\tadd.eq\tr5, r0, r1\n\tsub.s!\t0, r1, r1\n\tjump.ne\t@.BB0_2\n\tadd\t4, r4, r1\n\tptr.add\tr2, r1, r1\n\tld\tr1, r2\n\tsub.s!\t@CPI0_1[0], r2, r1\n\tjump.gt\t@.BB0_5\n\tadd\t63, r2, r1\n\tsub.s\t32, r0, r3\n\tand\tr1, r3, r3\n\tld.1\t64, r1\n\tadd\tr1, r3, r3\n\tsub!\tr3, r1, r5\n\tadd\t0, r0, r5\n\tadd.lt\t1, r0, r5\n\tsub.s!\t@CPI0_1[0], r3, r6\n\tjump.gt\t@.BB0_5\n\tand!\t1, r5, r5\n\tjump.ne\t@.BB0_5\n\tst.1\t64, r3\n\tst.1.inc\tr1, r2, r3\n\tadd\t36, r4, r5\n\tadd\tr2, r5, r4\n\tadd\tstack[@calldatasize], r0, r6\n\tsub!\tr4, r6, r4\n\tjump.gt\t@.BB0_2\n\tand\t31, r2, r4\n\tptr.add\tstack[@ptr_calldata], r5, r5\n\tshr.s!\t5, r2, r6\n\tjump.eq\t@.BB0_42\n\tadd\tr0, r0, r7\n.BB0_36:\n\tshl.s\t5, r7, r8\n\tadd\tr3, r8, r9\n\tptr.add\tr5, r8, r8\n\tld\tr8, r8\n\tst.1\tr9, r8\n\tadd\t1, r7, r7\n\tsub!\tr7, r6, r8\n\tjump.lt\t@.BB0_36\n.BB0_42:\n\tsub.s!\t0, r4, r7\n\tjump.eq\t@.BB0_38\n\tshl.s\t5, r6, r6\n\tptr.add\tr5, r6, r5\n\tadd\tr3, r6, r6\n\tshl.s\t3, r4, r4\n\tld.1\tr6, r7\n\tshl\tr7, r4, r7\n\tshr\tr7, r4, r7\n\tld\tr5, r5\n\tsub\t256, r4, r4\n\tshr\tr5, r4, r5\n\tshl\tr5, r4, r4\n\tor\tr4, r7, r4\n\tst.1\tr6, r4\n.BB0_38:\n\tadd\tr3, r2, r2\n\tst.1\tr2, r0\n\tnear_call\tr0, @copy_byte_array_to_storage_from_string_to_string.6, @DEFAULT_UNWIND\n\tadd\t@CPI0_0[0], r0, r1\n\tld.1\t64, r2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.lt\tr2, r0, r1\n\tshl.s\t64, r1, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_1:\n\tcontext.get_context_u128\tr1\n\tsub.s!\t0, r1, r1\n\tjump.ne\t@.BB0_2\n\tadd\tstack[@calldatasize], r0, r2\n\tadd\t31, r2, r3\n\tsub.s\t32, r0, r1\n\tand\tr3, r1, r5\n\tld.1\t64, r3\n\tadd\tr5, r3, r4\n\tsub!\tr4, r5, r5\n\tadd\t0, r0, r5\n\tadd.lt\t1, r0, r5\n\tsub.s!\t@CPI0_1[0], r4, r6\n\tjump.gt\t@.BB0_5\n\tand!\t1, r5, r5\n\tjump.ne\t@.BB0_5\n\tst.1\t64, r4\n\tand\t31, r2, r4\n\tptr.add\tstack[@ptr_calldata], r0, r5\n\tshr.s!\t5, r2, r6\n\tjump.eq\t@.BB0_43\n\tadd\tr0, r0, r7\n.BB0_8:\n\tshl.s\t5, r7, r8\n\tadd\tr3, r8, r9\n\tptr.add\tr5, r8, r8\n\tld\tr8, r8\n\tst.1\tr9, r8\n\tadd\t1, r7, r7\n\tsub!\tr7, r6, r8\n\tjump.lt\t@.BB0_8\n.BB0_43:\n\tsub.s!\t0, r4, r7\n\tjump.eq\t@.BB0_10\n\tshl.s\t5, r6, r6\n\tptr.add\tr5, r6, r5\n\tadd\tr3, r6, r6\n\tshl.s\t3, r4, r4\n\tld.1\tr6, r7\n\tshl\tr7, r4, r7\n\tshr\tr7, r4, r7\n\tld\tr5, r5\n\tsub\t256, r4, r4\n\tshr\tr5, r4, r5\n\tshl\tr5, r4, r4\n\tor\tr4, r7, r4\n\tst.1\tr6, r4\n.BB0_10:\n\tadd\t@CPI0_2[0], r0, r4\n\tsub.s!\t32, r2, r5\n\tadd\t0, r0, r5\n\tadd.lt\tr4, r0, r5\n\tand\t@CPI0_2[0], r2, r6\n\tsub.s!\t0, r6, r7\n\tadd.le\t0, r0, r4\n\tsub.s!\t@CPI0_2[0], r6, r6\n\tadd.ne\tr5, r0, r4\n\tsub.s!\t0, r4, r4\n\tjump.ne\t@.BB0_2\n\tld.1\tr3, r5\n\tsub.s!\t@CPI0_1[0], r5, r4\n\tjump.gt\t@.BB0_2\n\tadd\tr3, r2, r4\n\tadd\tr5, r3, r2\n\tadd\t31, r2, r3\n\tadd\t@CPI0_2[0], r0, r5\n\tsub!\tr3, r4, r6\n\tadd\t0, r0, r6\n\tadd.ge\tr5, r0, r6\n\tand\t@CPI0_2[0], r3, r3\n\tand\t@CPI0_2[0], r4, r7\n\tsub!\tr3, r7, r8\n\tadd.ge\t0, r0, r5\n\txor\tr3, r7, r3\n\tsub.s!\t@CPI0_2[0], r3, r3\n\tadd\tr6, r0, r3\n\tadd.eq\tr5, r0, r3\n\tsub.s!\t0, r3, r3\n\tjump.ne\t@.BB0_2\n\tld.1\tr2, r3\n\tsub.s!\t@CPI0_1[0], r3, r5\n\tjump.gt\t@.BB0_5\n\tadd\t63, r3, r5\n\tand\tr5, r1, r5\n\tld.1\t64, r1\n\tadd\tr1, r5, r5\n\tsub!\tr5, r1, r6\n\tadd\t0, r0, r6\n\tadd.lt\t1, r0, r6\n\tsub.s!\t@CPI0_1[0], r5, r7\n\tjump.gt\t@.BB0_5\n\tand!\t1, r6, r6\n\tjump.ne\t@.BB0_5\n\tst.1\t64, r5\n\tst.1\tr1, r3\n\tadd\t32, r3, r5\n\tadd\tr5, r2, r6\n\tsub!\tr6, r4, r4\n\tjump.gt\t@.BB0_2\n\tsub.s!\t0, r3, r4\n\tjump.eq\t@.BB0_22\n\tadd\tr0, r0, r4\n.BB0_19:\n\tadd\t32, r4, r4\n\tadd\tr4, r1, r6\n\tadd\tr4, r2, r7\n\tld.1\tr7, r7\n\tst.1\tr6, r7\n\tsub!\tr4, r3, r6\n\tjump.lt\t@.BB0_19\n\tsub!\tr4, r3, r2\n\tjump.le\t@.BB0_22\n\tadd\tr5, r1, r2\n\tst.1\tr2, r0\n.BB0_22:\n\tnear_call\tr0, @copy_byte_array_to_storage_from_string_to_string, @DEFAULT_UNWIND\n\tadd\t32, r0, r1\n\tst.2\t256, r1\n\tst.2\t288, r0\n\tadd\t@CPI0_3[0], r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_5:\n\tadd\t@CPI0_6[0], r0, r1\n\tst.1\t0, r1\n\tadd\t65, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI0_7[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_39:\n\tcontext.get_context_u128\tr1\n\tsub.s!\t0, r1, r1\n\tjump.ne\t@.BB0_2\n\tsub.s\t4, r0, r1\n\tadd\tstack[@calldatasize], r1, r1\n\tadd\t@CPI0_2[0], r0, r2\n\tsub.s!\t0, r1, r3\n\tadd\t0, r0, r3\n\tadd.lt\tr2, r0, r3\n\tand\t@CPI0_2[0], r1, r1\n\tsub.s!\t0, r1, r4\n\tadd.le\t0, r0, r2\n\tsub.s!\t@CPI0_2[0], r1, r1\n\tadd\tr3, r0, r1\n\tadd.eq\tr2, r0, r1\n\tsub.s!\t0, r1, r1\n\tjump.eq\t@.BB0_41\n.BB0_2:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_41:\n\tnear_call\tr0, @copy_array_from_storage_to_memory_string, @DEFAULT_UNWIND\n\tadd\tr1, r0, r2\n\tld.1\t64, r1\n\tadd\tr1, r0, stack-[1]\n\tnear_call\tr0, @abi_encode_string, @DEFAULT_UNWIND\n\tadd\tstack-[1], r0, r4\n\tsub\tr1, r4, r1\n\tadd\t@CPI0_0[0], r0, r2\n\tsub.s!\t@CPI0_0[0], r1, r3\n\tadd.ge\tr2, r0, r1\n\tsub.s!\t@CPI0_0[0], r4, r3\n\tadd.lt\tr4, r0, r2\n\tshl.s\t64, r2, r2\n\tshl.s\t96, r1, r1\n\tor\tr1, r2, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.func_end0:\n\ncopy_byte_array_to_storage_from_string_to_string:\n.func_begin1:\n\tnop\tstack+=[4]\n\tld.1.inc\tr1, r4, r6\n\tsub.s!\t@CPI1_0[0], r4, r2\n\tjump.ge\t@.BB1_1\n\tsload\tr0, r3\n\tand!\t1, r3, r2\n\tshr.s\t1, r3, r5\n\tand\t127, r5, r3\n\tadd.eq\tr3, r0, r5\n\tsub.s!\t31, r5, r3\n\tadd\t0, r0, r3\n\tadd.gt\t1, r0, r3\n\tand\t1, r3, r3\n\tsub!\tr2, r3, r2\n\tjump.ne\t@.BB1_3\n\tadd\tr1, r0, stack-[3]\n\tsub.s!\t32, r5, r1\n\tadd\tr4, r0, stack-[4]\n\tjump.lt\t@.BB1_10\n\tadd\tr5, r0, stack-[1]\n\tadd\tr6, r0, stack-[2]\n\tst.1\t0, r0\n\tadd\t@CPI1_1[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI1_1[0], r2, r3\n\tadd.lt\tr2, r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI1_2[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB1_6\n\tadd\tstack-[4], r0, r4\n\tadd\t31, r4, r2\n\tshr.s\t5, r2, r2\n\tsub.s!\t32, r4, r3\n\tadd.lt\t0, r0, r2\n\tld\tr1, r3\n\tadd\tstack-[1], r0, r1\n\tadd\t31, r1, r1\n\tshr.s\t5, r1, r1\n\tadd\tr3, r1, r1\n\tadd\tr3, r2, r2\n\tsub!\tr2, r1, r3\n\tadd\tstack-[2], r0, r6\n\tjump.ge\t@.BB1_10\n.BB1_9:\n\tsstore\tr2, r0\n\tadd\t1, r2, r2\n\tsub!\tr2, r1, r3\n\tjump.lt\t@.BB1_9\n.BB1_10:\n\tsub.s!\t31, r4, r1\n\tjump.le\t@.BB1_19\n\tst.1\t0, r0\n\tadd\t@CPI1_1[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI1_1[0], r2, r3\n\tadd.lt\tr2, r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI1_2[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB1_6\n\tsub.s\t32, r0, r2\n\tadd\tstack-[4], r0, r6\n\tand!\tr6, r2, r3\n\tadd\t32, r0, r2\n\tld\tr1, r1\n\tadd\tstack-[3], r0, r7\n\tjump.eq\t@.BB1_16\n\tadd\t32, r0, r2\n\tadd\tr0, r0, r4\n.BB1_15:\n\tadd\tr2, r7, r5\n\tld.1\tr5, r5\n\tsstore\tr1, r5\n\tadd\t32, r2, r2\n\tadd\t1, r1, r1\n\tadd\t32, r4, r4\n\tsub!\tr4, r3, r5\n\tjump.lt\t@.BB1_15\n.BB1_16:\n\tsub!\tr3, r6, r3\n\tjump.ge\t@.BB1_18\n\tshl.s\t3, r6, r3\n\tand\t248, r3, r3\n\tsub.s\t1, r0, r4\n\tshr\tr4, r3, r3\n\txor\tr3, r4, r3\n\tadd\tr2, r7, r2\n\tld.1\tr2, r2\n\tand\tr2, r3, r2\n\tsstore\tr1, r2\n.BB1_18:\n\tshl.s\t1, r6, r1\n\tor\t1, r1, r1\n\tjump\t@.BB1_11\n.BB1_19:\n\tsub.s!\t0, r4, r1\n\tadd\tr0, r0, r1\n\tjump.eq\t@.BB1_11\n\tshl.s\t3, r4, r1\n\tsub.s\t1, r0, r2\n\tshr\tr2, r1, r1\n\txor\tr1, r2, r1\n\tld.1\tr6, r2\n\tand\tr2, r1, r1\n\tshl.s\t1, r4, r2\n\tor\tr1, r2, r1\n.BB1_11:\n\tsstore\tr0, r1\n\tret\n.BB1_1:\n\tadd\t@CPI1_3[0], r0, r1\n\tst.1\t0, r1\n\tadd\t65, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI1_4[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB1_3:\n\tadd\t@CPI1_3[0], r0, r1\n\tst.1\t0, r1\n\tadd\t34, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI1_4[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB1_6:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end1:\n\nabi_encode_string:\n.func_begin2:\n\tadd\t32, r0, r3\n\tst.1.inc\tr1, r3, r4\n\tld.1\tr2, r3\n\tst.1\tr4, r3\n\tsub.s!\t0, r3, r4\n\tadd\t64, r1, r1\n\tjump.eq\t@.BB2_4\n\tadd\tr0, r0, r4\n.BB2_2:\n\tadd\tr1, r4, r5\n\tadd\t32, r4, r4\n\tadd\tr4, r2, r6\n\tld.1\tr6, r6\n\tst.1\tr5, r6\n\tsub!\tr4, r3, r5\n\tjump.lt\t@.BB2_2\n\tsub!\tr4, r3, r2\n\tjump.le\t@.BB2_4\n\tadd\tr1, r3, r2\n\tst.1\tr2, r0\n\tjump\t@.BB2_6\n.BB2_4:\n.BB2_6:\n\tadd\t31, r3, r2\n\tsub.s\t32, r0, r3\n\tand\tr2, r3, r2\n\tadd\tr1, r2, r1\n\tret\n.func_end2:\n\ncopy_array_from_storage_to_memory_string:\n.func_begin3:\n\tsload\tr0, r4\n\tand!\t1, r4, r5\n\tshr.s\t1, r4, r1\n\tand\t127, r1, r2\n\tadd.ne\tr1, r0, r2\n\tsub.s!\t31, r2, r1\n\tadd\t0, r0, r1\n\tadd.gt\t1, r0, r1\n\tand\t1, r1, r1\n\tsub!\tr5, r1, r1\n\tjump.ne\t@.BB3_1\n\tld.1\t64, r1\n\tst.1.inc\tr1, r2, r3\n\tsub.s!\t0, r5, r5\n\tjump.eq\t@.BB3_7\n\tst.1\t0, r0\n\tsub.s!\t0, r2, r4\n\tadd\tr0, r0, r4\n\tjump.eq\t@.BB3_11\n\tadd\t@CPI3_0[0], r0, r5\n\tadd\tr0, r0, r4\n.BB3_10:\n\tadd\tr3, r4, r6\n\tsload\tr5, r7\n\tst.1\tr6, r7\n\tadd\t1, r5, r5\n\tadd\t32, r4, r4\n\tsub!\tr4, r2, r6\n\tjump.lt\t@.BB3_10\n.BB3_11:\n\tadd\tr3, r4, r2\n\tjump\t@.BB3_3\n.BB3_7:\n\tsub.s\t256, r0, r2\n\tand\tr4, r2, r2\n\tst.1\tr3, r2\n\tadd\t64, r1, r2\n.BB3_3:\n\tsub\tr2, r1, r2\n\tadd\t31, r2, r2\n\tsub.s\t32, r0, r3\n\tand\tr2, r3, r3\n\tadd\tr3, r1, r2\n\tsub!\tr2, r3, r3\n\tadd\t0, r0, r3\n\tadd.lt\t1, r0, r3\n\tsub.s!\t@CPI3_1[0], r2, r4\n\tjump.gt\t@.BB3_5\n\tand!\t1, r3, r3\n\tjump.ne\t@.BB3_5\n\tst.1\t64, r2\n\tret\n.BB3_1:\n\tadd\t@CPI3_2[0], r0, r1\n\tst.1\t0, r1\n\tadd\t34, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI3_3[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB3_5:\n\tadd\t@CPI3_2[0], r0, r1\n\tst.1\t0, r1\n\tadd\t65, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI3_3[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end3:\n\ncopy_byte_array_to_storage_from_string_to_string.6:\n.func_begin4:\n\tld.1.inc\tr1, r2, r3\n\tsub.s!\t@CPI4_0[0], r2, r4\n\tjump.ge\t@.BB4_1\n\tsload\tr0, r4\n\tand!\t1, r4, r5\n\tshr.s\t1, r4, r4\n\tand\t127, r4, r6\n\tadd.eq\tr6, r0, r4\n\tsub.s!\t31, r4, r6\n\tadd\t0, r0, r6\n\tadd.gt\t1, r0, r6\n\tand\t1, r6, r6\n\tsub!\tr5, r6, r5\n\tjump.ne\t@.BB4_3\n\tsub.s!\t32, r4, r5\n\tjump.lt\t@.BB4_8\n\tadd\t31, r2, r5\n\tshr.s\t5, r5, r5\n\tadd\t@CPI4_1[0], r5, r5\n\tadd\t@CPI4_1[0], r0, r6\n\tsub.s!\t32, r2, r7\n\tadd.lt\tr6, r0, r5\n\tst.1\t0, r0\n\tadd\t31, r4, r4\n\tshr.s\t5, r4, r4\n\tadd\t@CPI4_1[0], r4, r4\n\tsub!\tr5, r4, r6\n\tjump.ge\t@.BB4_8\n.BB4_7:\n\tsstore\tr5, r0\n\tadd\t1, r5, r5\n\tsub!\tr5, r4, r6\n\tjump.lt\t@.BB4_7\n.BB4_8:\n\tsub.s!\t31, r2, r4\n\tjump.le\t@.BB4_16\n\tsub.s\t32, r0, r3\n\tand!\tr2, r3, r5\n\tadd\t32, r0, r4\n\tadd\t@CPI4_1[0], r0, r3\n\tst.1\t0, r0\n\tjump.eq\t@.BB4_13\n\tadd\t@CPI4_1[0], r0, r3\n\tadd\t32, r0, r4\n\tadd\tr0, r0, r6\n.BB4_12:\n\tadd\tr4, r1, r7\n\tld.1\tr7, r7\n\tsstore\tr3, r7\n\tadd\t32, r4, r4\n\tadd\t1, r3, r3\n\tadd\t32, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB4_12\n.BB4_13:\n\tsub!\tr5, r2, r5\n\tjump.ge\t@.BB4_15\n\tshl.s\t3, r2, r5\n\tand\t248, r5, r5\n\tsub.s\t1, r0, r6\n\tshr\tr6, r5, r5\n\txor\tr5, r6, r5\n\tadd\tr4, r1, r1\n\tld.1\tr1, r1\n\tand\tr1, r5, r1\n\tsstore\tr3, r1\n.BB4_15:\n\tshl.s\t1, r2, r1\n\tor\t1, r1, r1\n\tjump\t@.BB4_9\n.BB4_16:\n\tsub.s!\t0, r2, r1\n\tadd\tr0, r0, r1\n\tjump.eq\t@.BB4_9\n\tshl.s\t3, r2, r1\n\tsub.s\t1, r0, r4\n\tshr\tr4, r1, r1\n\txor\tr1, r4, r1\n\tld.1\tr3, r3\n\tand\tr3, r1, r1\n\tshl.s\t1, r2, r2\n\tor\tr1, r2, r1\n.BB4_9:\n\tsstore\tr0, r1\n\tret\n.BB4_1:\n\tadd\t@CPI4_2[0], r0, r1\n\tst.1\t0, r1\n\tadd\t65, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI4_3[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB4_3:\n\tadd\t@CPI4_2[0], r0, r1\n\tst.1\t0, r1\n\tadd\t34, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI4_3[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end4:\n\n__staticcall:\n.func_begin5:\n.tmp0:\n\tfar_call.static\tr1, r2, @.BB5_2\n.tmp1:\n\tadd\t1, r0, r2\n\tret\n.BB5_2:\n.tmp2:\n\tadd\tr0, r0, r2\n\tret\n.func_end5:\n\n\t.data\n\t.p2align\t5\ncalldatasize:\n\t.cell 0\n\n\t.p2align\t5\nptr_calldata:\n.cell\t0\n\n\t.note.GNU-stack\n\t.rodata\nCPI0_0:\nCPI1_1:\n\t.cell 4294967295\nCPI0_1:\nCPI3_1:\n\t.cell 18446744073709551615\nCPI0_2:\n\t.cell -57896044618658097711785492504343953926634992332820282019728792003956564819968\nCPI0_3:\n\t.cell 53919893334301279589334030174039261352344891250716429051063678533632\nCPI0_4:\n\t.cell 3484299799\nCPI0_5:\n\t.cell 2752735330\nCPI0_6:\nCPI1_3:\nCPI3_2:\nCPI4_2:\n\t.cell 35408467139433450592217433187231851964531694900788300625387963629091585785856\nCPI0_7:\nCPI1_4:\nCPI3_3:\nCPI4_3:\n\t.cell 2852213850513516153367582212096\nCPI1_0:\nCPI4_0:\n\t.cell 18446744073709551616\nCPI1_2:\n\t.cell 904625697166532776746648320380374280103671757735618107014721178055227736064\nCPI3_0:\nCPI4_1:\n\t.cell 18569430475105882587588266137607568536673111973893317399460219858819262702947\n","bytecode":{"object":""},"methodIdentifiers":{"greet()":"cfae3217","setGreeting(string)":"a4136862"}},"irOptimized":"/*=====================================================*\n *                       WARNING                       *\n *  Solidity to Yul compilation is still EXPERIMENTAL  *\n *       It can result in LOSS OF FUNDS or worse       *\n *                !USE AT YOUR OWN RISK!               *\n *=====================================================*/\n\n/// @use-src 0:\"contracts/Greeter.sol\"\nobject \"Greeter_32\" {\n    code {\n        {\n            /// @src 0:62:378  \"contract Greeter {...\"\n            mstore(64, 128)\n            if callvalue() { revert(0, 0) }\n            let programSize := datasize(\"Greeter_32\")\n            let argSize := sub(codesize(), programSize)\n            let memoryDataOffset := allocate_memory(argSize)\n            codecopy(memoryDataOffset, programSize, argSize)\n            let _1 := add(memoryDataOffset, argSize)\n            let _2 := 32\n            if slt(sub(_1, memoryDataOffset), _2)\n            {\n                revert(/** @src -1:-1:-1 */ 0, 0)\n            }\n            /// @src 0:62:378  \"contract Greeter {...\"\n            let offset := mload(memoryDataOffset)\n            let _3 := sub(shl(64, 1), 1)\n            if gt(offset, _3)\n            {\n                revert(/** @src -1:-1:-1 */ 0, 0)\n            }\n            /// @src 0:62:378  \"contract Greeter {...\"\n            let _4 := add(memoryDataOffset, offset)\n            if iszero(slt(add(_4, 0x1f), _1))\n            {\n                revert(/** @src -1:-1:-1 */ 0, 0)\n            }\n            /// @src 0:62:378  \"contract Greeter {...\"\n            let _5 := mload(_4)\n            if gt(_5, _3) { panic_error_0x41() }\n            let array := allocate_memory(add(and(add(_5, 0x1f), not(31)), _2))\n            mstore(array, _5)\n            if gt(add(add(_4, _5), _2), _1)\n            {\n                revert(/** @src -1:-1:-1 */ 0, 0)\n            }\n            /// @src 0:62:378  \"contract Greeter {...\"\n            let i := /** @src -1:-1:-1 */ 0\n            /// @src 0:62:378  \"contract Greeter {...\"\n            for { } lt(i, _5) { i := add(i, _2) }\n            {\n                mstore(add(add(array, i), _2), mload(add(add(_4, i), _2)))\n            }\n            if gt(i, _5)\n            {\n                mstore(add(add(array, _5), _2), /** @src -1:-1:-1 */ 0)\n            }\n            /// @src 0:62:378  \"contract Greeter {...\"\n            copy_byte_array_to_storage_from_string_to_string(array)\n            let _6 := mload(64)\n            let _7 := datasize(\"Greeter_32_deployed\")\n            codecopy(_6, dataoffset(\"Greeter_32_deployed\"), _7)\n            return(_6, _7)\n        }\n        function panic_error_0x41()\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x41)\n            revert(0, 0x24)\n        }\n        function allocate_memory(size) -> memPtr\n        {\n            memPtr := mload(64)\n            let newFreePtr := add(memPtr, and(add(size, 31), not(31)))\n            if or(gt(newFreePtr, sub(shl(64, 1), 1)), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n            mstore(64, newFreePtr)\n        }\n        function extract_byte_array_length(data) -> length\n        {\n            length := shr(1, data)\n            let outOfPlaceEncoding := and(data, 1)\n            if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n            if eq(outOfPlaceEncoding, lt(length, 32))\n            {\n                mstore(0, shl(224, 0x4e487b71))\n                mstore(4, 0x22)\n                revert(0, 0x24)\n            }\n        }\n        function array_dataslot_string_storage() -> data\n        {\n            mstore(/** @src 0:162:182  \"greeting = _greeting\" */ 0x00, 0x00)\n            /// @src 0:62:378  \"contract Greeter {...\"\n            data := keccak256(/** @src 0:162:182  \"greeting = _greeting\" */ 0x00, /** @src 0:62:378  \"contract Greeter {...\" */ 0x20)\n        }\n        function clean_up_bytearray_end_slots_string_storage(len, startIndex)\n        {\n            let array := /** @src 0:162:182  \"greeting = _greeting\" */ 0x00\n            /// @src 0:62:378  \"contract Greeter {...\"\n            if gt(len, 31)\n            {\n                mstore(/** @src 0:162:182  \"greeting = _greeting\" */ array, array)\n                /// @src 0:62:378  \"contract Greeter {...\"\n                let data := keccak256(/** @src 0:162:182  \"greeting = _greeting\" */ array, /** @src 0:62:378  \"contract Greeter {...\" */ 0x20)\n                let deleteStart := add(data, shr(5, add(startIndex, 31)))\n                if lt(startIndex, 0x20) { deleteStart := data }\n                let _1 := add(data, shr(5, add(len, 31)))\n                let start := deleteStart\n                for { } lt(start, _1) { start := add(start, 1) }\n                {\n                    sstore(start, /** @src 0:162:182  \"greeting = _greeting\" */ array)\n                }\n            }\n        }\n        /// @src 0:62:378  \"contract Greeter {...\"\n        function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used\n        {\n            used := or(and(data, not(shr(shl(3, len), not(0)))), shl(1, len))\n        }\n        function copy_byte_array_to_storage_from_string_to_string(src)\n        {\n            let newLen := mload(src)\n            if gt(newLen, sub(shl(64, 1), 1)) { panic_error_0x41() }\n            /// @src 0:162:182  \"greeting = _greeting\"\n            let _1 := 0x00\n            /// @src 0:62:378  \"contract Greeter {...\"\n            clean_up_bytearray_end_slots_string_storage(extract_byte_array_length(sload(/** @src 0:162:182  \"greeting = _greeting\" */ _1)), /** @src 0:62:378  \"contract Greeter {...\" */ newLen)\n            let srcOffset := /** @src 0:162:182  \"greeting = _greeting\" */ _1\n            /// @src 0:62:378  \"contract Greeter {...\"\n            let srcOffset_1 := 0x20\n            srcOffset := srcOffset_1\n            switch gt(newLen, 31)\n            case 1 {\n                let loopEnd := and(newLen, not(31))\n                let dstPtr := array_dataslot_string_storage()\n                let i := /** @src 0:162:182  \"greeting = _greeting\" */ _1\n                /// @src 0:62:378  \"contract Greeter {...\"\n                for { } lt(i, loopEnd) { i := add(i, srcOffset_1) }\n                {\n                    sstore(dstPtr, mload(add(src, srcOffset)))\n                    dstPtr := add(dstPtr, 1)\n                    srcOffset := add(srcOffset, srcOffset_1)\n                }\n                if lt(loopEnd, newLen)\n                {\n                    let lastValue := mload(add(src, srcOffset))\n                    sstore(dstPtr, and(lastValue, not(shr(and(shl(3, newLen), 248), not(0)))))\n                }\n                sstore(/** @src 0:162:182  \"greeting = _greeting\" */ _1, /** @src 0:62:378  \"contract Greeter {...\" */ add(shl(1, newLen), 1))\n            }\n            default {\n                let value := /** @src 0:162:182  \"greeting = _greeting\" */ _1\n                /// @src 0:62:378  \"contract Greeter {...\"\n                if newLen\n                {\n                    value := mload(add(src, srcOffset))\n                }\n                sstore(/** @src 0:162:182  \"greeting = _greeting\" */ _1, /** @src 0:62:378  \"contract Greeter {...\" */ extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n            }\n        }\n    }\n    /// @use-src 0:\"contracts/Greeter.sol\"\n    object \"Greeter_32_deployed\" {\n        code {\n            {\n                /// @src 0:62:378  \"contract Greeter {...\"\n                mstore(64, 128)\n                if iszero(lt(calldatasize(), 4))\n                {\n                    let _1 := 0\n                    switch shr(224, calldataload(_1))\n                    case 0xa4136862 {\n                        if callvalue() { revert(_1, _1) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(_1, _1) }\n                        let offset := calldataload(4)\n                        let _2 := 0xffffffffffffffff\n                        if gt(offset, _2) { revert(_1, _1) }\n                        if iszero(slt(add(offset, 35), calldatasize())) { revert(_1, _1) }\n                        let _3 := calldataload(add(4, offset))\n                        if gt(_3, _2) { panic_error_0x41() }\n                        let memPtr := mload(64)\n                        finalize_allocation(memPtr, add(and(add(_3, 0x1f), not(31)), 32))\n                        mstore(memPtr, _3)\n                        if gt(add(add(offset, _3), 36), calldatasize()) { revert(_1, _1) }\n                        calldatacopy(add(memPtr, 32), add(offset, 36), _3)\n                        mstore(add(add(memPtr, _3), 32), _1)\n                        copy_byte_array_to_storage_from_string_to_string(memPtr)\n                        return(mload(64), _1)\n                    }\n                    case 0xcfae3217 {\n                        if callvalue() { revert(_1, _1) }\n                        abi_decode(calldatasize())\n                        let converted := copy_array_from_storage_to_memory_string()\n                        let memPos := mload(64)\n                        return(memPos, sub(abi_encode_string(memPos, converted), memPos))\n                    }\n                }\n                revert(0, 0)\n            }\n            function panic_error_0x41()\n            {\n                mstore(0, shl(224, 0x4e487b71))\n                mstore(4, 0x41)\n                revert(0, 0x24)\n            }\n            function finalize_allocation(memPtr, size)\n            {\n                let newFreePtr := add(memPtr, and(add(size, 31), not(31)))\n                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n                mstore(64, newFreePtr)\n            }\n            function abi_decode(dataEnd)\n            {\n                if slt(add(dataEnd, not(3)), 0) { revert(0, 0) }\n            }\n            function abi_encode_string(headStart, value0) -> tail\n            {\n                let _1 := 32\n                mstore(headStart, _1)\n                let length := mload(value0)\n                mstore(add(headStart, _1), length)\n                let i := 0\n                for { } lt(i, length) { i := add(i, _1) }\n                {\n                    mstore(add(add(headStart, i), 64), mload(add(add(value0, i), _1)))\n                }\n                if gt(i, length)\n                {\n                    mstore(add(add(headStart, length), 64), 0)\n                }\n                tail := add(add(headStart, and(add(length, 31), not(31))), 64)\n            }\n            function extract_byte_array_length(data) -> length\n            {\n                length := shr(1, data)\n                let outOfPlaceEncoding := and(data, 1)\n                if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n                if eq(outOfPlaceEncoding, lt(length, 32))\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x22)\n                    revert(0, 0x24)\n                }\n            }\n            function array_dataslot_string_storage() -> data\n            {\n                mstore(0, 0)\n                data := 18569430475105882587588266137607568536673111973893317399460219858819262702947\n            }\n            function copy_array_from_storage_to_memory_string() -> memPtr\n            {\n                memPtr := mload(64)\n                let ret := 0\n                let slotValue := sload(ret)\n                let length := extract_byte_array_length(slotValue)\n                mstore(memPtr, length)\n                let _1 := 0x20\n                let _2 := 1\n                switch and(slotValue, _2)\n                case 0 {\n                    mstore(add(memPtr, _1), and(slotValue, not(255)))\n                    ret := add(memPtr, 64)\n                }\n                case 1 {\n                    mstore(0, 0)\n                    let dataPos := 18569430475105882587588266137607568536673111973893317399460219858819262702947\n                    let i := 0\n                    for { } lt(i, length) { i := add(i, _1) }\n                    {\n                        mstore(add(add(memPtr, i), _1), sload(dataPos))\n                        dataPos := add(dataPos, _2)\n                    }\n                    ret := add(add(memPtr, i), _1)\n                }\n                finalize_allocation(memPtr, sub(ret, memPtr))\n            }\n            function clean_up_bytearray_end_slots_string_storage(len, startIndex)\n            {\n                if gt(len, 31)\n                {\n                    let _1 := 0\n                    mstore(_1, _1)\n                    let _2 := 18569430475105882587588266137607568536673111973893317399460219858819262702947\n                    let deleteStart := add(_2, shr(5, add(startIndex, 31)))\n                    if lt(startIndex, 0x20) { deleteStart := _2 }\n                    let _3 := add(_2, shr(5, add(len, 31)))\n                    let start := deleteStart\n                    for { } lt(start, _3) { start := add(start, 1) }\n                    { sstore(start, _1) }\n                }\n            }\n            function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used\n            {\n                used := or(and(data, not(shr(shl(3, len), not(0)))), shl(1, len))\n            }\n            function copy_byte_array_to_storage_from_string_to_string(src)\n            {\n                let newLen := mload(src)\n                if gt(newLen, 0xffffffffffffffff) { panic_error_0x41() }\n                let _1 := 0\n                clean_up_bytearray_end_slots_string_storage(extract_byte_array_length(sload(_1)), newLen)\n                let srcOffset := _1\n                let srcOffset_1 := 0x20\n                srcOffset := srcOffset_1\n                switch gt(newLen, 31)\n                case 1 {\n                    let loopEnd := and(newLen, not(31))\n                    let dstPtr := array_dataslot_string_storage()\n                    let i := _1\n                    for { } lt(i, loopEnd) { i := add(i, srcOffset_1) }\n                    {\n                        sstore(dstPtr, mload(add(src, srcOffset)))\n                        dstPtr := add(dstPtr, 1)\n                        srcOffset := add(srcOffset, srcOffset_1)\n                    }\n                    if lt(loopEnd, newLen)\n                    {\n                        let lastValue := mload(add(src, srcOffset))\n                        sstore(dstPtr, and(lastValue, not(shr(and(shl(3, newLen), 248), not(0)))))\n                    }\n                    sstore(_1, add(shl(1, newLen), 1))\n                }\n                default {\n                    let value := _1\n                    if newLen\n                    {\n                        value := mload(add(src, srcOffset))\n                    }\n                    sstore(_1, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n                }\n            }\n        }\n        data \".metadata\" hex\"a36469706673582212206468a16628c3ef71c7a0f90701f43e7d209bba65cb6f1775a2dee6b1c2b0877b6c6578706572696d656e74616cf564736f6c63430008080041\"\n    }\n}\n","hash":"0100009d1023093fdcea2e9ee98a8d7ed2347c93dde4822c2179105cccb1160e","factoryDependencies":{}}}}}}